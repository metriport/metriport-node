/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Metriport from "../../..";

/**
 * Medplum client application for automated access.
 */
export interface ClientApplication {
    resourceType: "ClientApplication";
    /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
    id?: Metriport.fhir.Id;
    /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
    meta?: Metriport.fhir.Meta;
    /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
    implicitRules?: Metriport.fhir.Uri;
    /** The base language in which the resource is written. */
    language?: Metriport.fhir.Code;
    /** A name associated with the ClientApplication. */
    name?: string;
    /** A summary, characterization or explanation of the ClientApplication. */
    description?: string;
    /** Client secret string used to verify the identity of a client. */
    secret?: string;
    /** Optional JWKS URI for public key verification of JWTs issued by the authorization server (client_secret_jwt). */
    jwksUri?: Metriport.fhir.Uri;
    /** Optional redirect URI used when redirecting a client back to the client application. */
    redirectUri?: Metriport.fhir.Uri;
    /** Optional launch URI for SMART EHR launch sequence. */
    launchUri?: Metriport.fhir.Uri;
    /** Flag to make PKCE optional for this client application. PKCE is required by default for compliance with Smart App Launch. It can be disabled for compatibility with legacy client applications. */
    pkceOptional?: boolean;
    /** Optional external Identity Provider (IdP) for the client application. */
    identityProvider?: Metriport.fhir.IdentityProvider;
}
