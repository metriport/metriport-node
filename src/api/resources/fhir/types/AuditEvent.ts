/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Metriport from "../../..";

/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export interface AuditEvent extends Metriport.fhir.BaseResource {
    resourceType: "AuditEvent";
    /** Identifier for a family of the event. For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function. */
    type: Metriport.fhir.Coding;
    /** Identifier for the category of event. */
    subtype?: Metriport.fhir.Coding[];
    /** Indicator for type of action performed during the event that generated the audit. */
    action?: Metriport.fhir.AuditEventAction;
    /** The period during which the activity occurred. */
    period?: Metriport.fhir.Period;
    /** The time when the event was recorded. */
    recorded?: Metriport.fhir.Instant;
    /** Indicates whether the event succeeded or failed. */
    outcome?: Metriport.fhir.AuditEventOutcome;
    /** A free text description of the outcome of the event. */
    outcomeDesc?: string;
    /** The purposeOfUse (reason) that was used during the event being recorded. */
    purposeOfEvent?: Metriport.fhir.CodeableConcept[];
    /** An actor taking an active role in the event or activity that is logged. */
    agent: Metriport.fhir.AuditEventAgent[];
    /** The system that is reporting the event. */
    source: Metriport.fhir.AuditEventSource;
    /** Specific instances of data or objects that have been accessed. */
    entity?: Metriport.fhir.AuditEventEntity[];
}
