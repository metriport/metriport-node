/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Metriport from "../../..";

/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export interface Endpoint extends Metriport.fhir.BaseResource {
    resourceType: "Endpoint";
    /** Identifier for the organization that is used to identify the endpoint across multiple disparate systems. */
    identifier?: Metriport.fhir.Identifier[];
    /** active | suspended | error | off | test. */
    status?: Metriport.fhir.EndpointStatus;
    /** A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook). */
    connectionType: Metriport.fhir.Coding;
    /** A friendly name that this endpoint can be referred to with. */
    name?: string;
    /** The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data). */
    managingOrganization?: Metriport.fhir.Reference;
    /** Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting. */
    contact?: Metriport.fhir.ContactPoint[];
    /** The interval during which the endpoint is expected to be operational. */
    period?: Metriport.fhir.Period;
    /** The payload type describes the acceptable content that can be communicated on the endpoint. */
    payloadType: Metriport.fhir.CodeableConcept[];
    /** The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType). */
    payloadMimeType?: Metriport.fhir.Code[];
    /** The uri that describes the actual end-point to connect to. */
    address?: Metriport.fhir.Url;
    /** Additional headers / information to send as part of the notification. */
    header?: string[];
}
