/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Metriport from "../../../../..";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors";

export declare namespace Organization {
    interface Options {
        environment?: core.Supplier<environments.MetriportEnvironment | string>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Organization {
    constructor(protected readonly _options: Organization.Options) {}

    /**
     * Registers your Organization in Metriport.
     *
     * @example
     *     await metriport.medical.organization.create({
     *         name: "Metriport Inc.",
     *         type: Metriport.medical.OrgType.Ambulatory,
     *         location: {
     *             addressLine1: "2261 Market Street",
     *             addressLine2: "#4818",
     *             city: "San Francisco",
     *             state: Metriport.UsState.Ca,
     *             zip: "94114",
     *             country: "USA"
     *         }
     *     })
     */
    public async create(
        request: Metriport.medical.OrganizationCreate,
        requestOptions?: Organization.RequestOptions
    ): Promise<Metriport.medical.Organization> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                "/medical/v1/organization"
            ),
            method: "POST",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Organization;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the Organization representing your legal corporate entity.
     *
     * @example
     *     await metriport.medical.organization.get()
     */
    public async get(requestOptions?: Organization.RequestOptions): Promise<Metriport.medical.Organization> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                "/medical/v1/organization"
            ),
            method: "GET",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Organization;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates your Organization's details.
     *
     * @example
     *     await metriport.medical.organization.update("12345678", {
     *         name: "Metriport Inc.",
     *         type: Metriport.medical.OrgType.Ambulatory,
     *         location: {
     *             addressLine1: "2261 Market Street",
     *             addressLine2: "#4818",
     *             city: "San Francisco",
     *             state: Metriport.UsState.Ca,
     *             zip: "94114",
     *             country: "USA"
     *         }
     *     })
     */
    public async update(
        id: string,
        request: Metriport.medical.OrganizationUpdateRequest,
        requestOptions?: Organization.RequestOptions
    ): Promise<Metriport.medical.Organization> {
        const { ETag: eTag, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/organization/${id}`
            ),
            method: "PUT",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
                ETag: eTag != null ? eTag : undefined,
            },
            contentType: "application/json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Organization;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
