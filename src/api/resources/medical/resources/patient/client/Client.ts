/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Metriport from "../../../../..";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors";

export declare namespace Patient {
    interface Options {
        environment?: core.Supplier<environments.MetriportEnvironment | string>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Patient {
    constructor(protected readonly _options: Patient.Options) {}

    /**
     * Creates a Patient in Metriport for the specified Facility where the patient is receiving care.
     * The more demographic info you can provide about a Patient,
     * the higher chances Metriport will be able to find a match.
     * For example, nicknames, old addresses, multiple phone numbers,
     * a pre-marital last name, etc.
     *
     * @example
     *     await metriport.medical.patient.create({
     *         facilityId: "2.16.840.1.113883.3.666.5.2004.4.2005",
     *         body: {
     *             firstName: "Karen",
     *             lastName: "Lynch",
     *             dob: "1963-12-30",
     *             genderAtBirth: "F",
     *             personalIdentifiers: [{
     *                     type: "driversLicense",
     *                     state: Metriport.UsState.Ca,
     *                     value: "51227265"
     *                 }],
     *             address: [{
     *                     addressLine1: "2261 Market Street",
     *                     addressLine2: "#4818",
     *                     city: "San Francisco",
     *                     state: Metriport.UsState.Ca,
     *                     zip: "94114",
     *                     country: "USA"
     *                 }]
     *         }
     *     })
     */
    public async create(
        request: Metriport.medical.PatientCreate,
        requestOptions?: Patient.RequestOptions
    ): Promise<Metriport.medical.Patient> {
        const { facilityId, body: _body } = request;
        const _queryParams: Record<string, string | string[]> = {};
        _queryParams["facilityId"] = facilityId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                "/medical/v1/patient"
            ),
            method: "POST",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Patient;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get a Patient
     *
     * @example
     *     await metriport.medical.patient.get("2.16.840.1.113883.3.666.777")
     */
    public async get(id: string, requestOptions?: Patient.RequestOptions): Promise<Metriport.medical.Patient> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/patient/${id}`
            ),
            method: "GET",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Patient;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the specified Patient.
     */
    public async update(
        id: string,
        request: Metriport.medical.PatientUpdate,
        requestOptions?: Patient.RequestOptions
    ): Promise<Metriport.medical.Patient> {
        const { facilityId, body: _body } = request;
        const _queryParams: Record<string, string | string[]> = {};
        _queryParams["facilityId"] = facilityId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/patient/${id}`
            ),
            method: "PUT",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.Patient;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists all Patients receiving care at the specified Facility, or all Patients if no Facility is specified.
     */
    public async list(
        request: Metriport.medical.PatientList = {},
        requestOptions?: Patient.RequestOptions
    ): Promise<Metriport.medical.ListPatientsResponse> {
        const { facilityId } = request;
        const _queryParams: Record<string, string | string[]> = {};
        if (facilityId != null) {
            _queryParams["facilityId"] = facilityId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                "/medical/v1/patient"
            ),
            method: "GET",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.ListPatientsResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Removes the specified Patient.
     */
    public async delete(
        id: string,
        request: Metriport.medical.PatientDelete = {},
        requestOptions?: Patient.RequestOptions
    ): Promise<void> {
        const { facilityId } = request;
        const _queryParams: Record<string, string | string[]> = {};
        if (facilityId != null) {
            _queryParams["facilityId"] = facilityId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/patient/${id}`
            ),
            method: "DELETE",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns the URL for a medical record summary
     */
    public async getMedicalRecordSummary(
        patientId: string,
        request: Metriport.medical.MedicalRecordSummaryRequest,
        requestOptions?: Patient.RequestOptions
    ): Promise<string> {
        const { conversionType } = request;
        const _queryParams: Record<string, string | string[]> = {};
        _queryParams["conversionType"] = conversionType;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/patient/${patientId}/medical-record`
            ),
            method: "GET",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as string;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns the status of a medical record summary
     */
    public async getMedicalRecordSummaryStatus(
        patientId: string,
        requestOptions?: Patient.RequestOptions
    ): Promise<Metriport.medical.MedicalRecordStatus> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MetriportEnvironment.Production,
                `/medical/v1/patient/${patientId}/medical-record-status`
            ),
            method: "GET",
            headers: {
                "X-API-Key": await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@metriport/api-sdk",
                "X-Fern-SDK-Version": "0.0.343",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return _response.body as Metriport.medical.MedicalRecordStatus;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MetriportError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MetriportError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MetriportTimeoutError();
            case "unknown":
                throw new errors.MetriportError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
